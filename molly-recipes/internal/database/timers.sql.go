// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: timers.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createTimer = `-- name: CreateTimer :one
INSERT INTO timers(id, instruction_id, unit, value, created)
VALUES (GEN_RANDOM_UUID(), $1, $2, $3, NOW())
RETURNING id, instruction_id, unit, value, created
`

type CreateTimerParams struct {
	InstructionID uuid.UUID
	Unit          string
	Value         int32
}

func (q *Queries) CreateTimer(ctx context.Context, arg CreateTimerParams) (Timer, error) {
	row := q.db.QueryRowContext(ctx, createTimer, arg.InstructionID, arg.Unit, arg.Value)
	var i Timer
	err := row.Scan(
		&i.ID,
		&i.InstructionID,
		&i.Unit,
		&i.Value,
		&i.Created,
	)
	return i, err
}

const getTimersByInstructionID = `-- name: GetTimersByInstructionID :many
SELECT id, instruction_id, unit, value, created FROM timers WHERE instruction_id=$1
`

func (q *Queries) GetTimersByInstructionID(ctx context.Context, instructionID uuid.UUID) ([]Timer, error) {
	rows, err := q.db.QueryContext(ctx, getTimersByInstructionID, instructionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Timer
	for rows.Next() {
		var i Timer
		if err := rows.Scan(
			&i.ID,
			&i.InstructionID,
			&i.Unit,
			&i.Value,
			&i.Created,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
