// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: recipes.sql

package database

import (
	"context"
)

const createRecipe = `-- name: CreateRecipe :one
INSERT INTO recipes(
    id, 
    recipe_url, 
    title, 
    description, 
    cooking_method, 
    category, 
    image_url, 
    prep_time_minutes, 
    prep_time_string, 
    cook_time_minutes, 
    cook_time_string,
    total_time_minutes,
    total_time_string,
    created
    ) VALUES (
        GEN_RANDOM_UUID(),
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9,
        $10,
        $11,
        $12,
        NOW()
    ) RETURNING id, recipe_url, title, description, cooking_method, category, image_url, prep_time_minutes, prep_time_string, cook_time_minutes, cook_time_string, total_time_minutes, total_time_string, created
`

type CreateRecipeParams struct {
	RecipeUrl        string
	Title            string
	Description      string
	CookingMethod    string
	Category         string
	ImageUrl         string
	PrepTimeMinutes  int32
	PrepTimeString   string
	CookTimeMinutes  int32
	CookTimeString   string
	TotalTimeMinutes int32
	TotalTimeString  string
}

func (q *Queries) CreateRecipe(ctx context.Context, arg CreateRecipeParams) (Recipe, error) {
	row := q.db.QueryRowContext(ctx, createRecipe,
		arg.RecipeUrl,
		arg.Title,
		arg.Description,
		arg.CookingMethod,
		arg.Category,
		arg.ImageUrl,
		arg.PrepTimeMinutes,
		arg.PrepTimeString,
		arg.CookTimeMinutes,
		arg.CookTimeString,
		arg.TotalTimeMinutes,
		arg.TotalTimeString,
	)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.RecipeUrl,
		&i.Title,
		&i.Description,
		&i.CookingMethod,
		&i.Category,
		&i.ImageUrl,
		&i.PrepTimeMinutes,
		&i.PrepTimeString,
		&i.CookTimeMinutes,
		&i.CookTimeString,
		&i.TotalTimeMinutes,
		&i.TotalTimeString,
		&i.Created,
	)
	return i, err
}

const getRecipeByURL = `-- name: GetRecipeByURL :one
SELECT id, recipe_url, title, description, cooking_method, category, image_url, prep_time_minutes, prep_time_string, cook_time_minutes, cook_time_string, total_time_minutes, total_time_string, created FROM recipes WHERE recipe_url=$1
`

func (q *Queries) GetRecipeByURL(ctx context.Context, recipeUrl string) (Recipe, error) {
	row := q.db.QueryRowContext(ctx, getRecipeByURL, recipeUrl)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.RecipeUrl,
		&i.Title,
		&i.Description,
		&i.CookingMethod,
		&i.Category,
		&i.ImageUrl,
		&i.PrepTimeMinutes,
		&i.PrepTimeString,
		&i.CookTimeMinutes,
		&i.CookTimeString,
		&i.TotalTimeMinutes,
		&i.TotalTimeString,
		&i.Created,
	)
	return i, err
}
