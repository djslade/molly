// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: recipes.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createRecipe = `-- name: CreateRecipe :one
INSERT INTO recipes(
    id, 
    recipe_url, 
    title,
    description,
    cuisine, 
    cooking_method, 
    category, 
    image_url,
    yields,
    prep_time_minutes, 
    cook_time_minutes, 
    total_time_minutes,
    created
    ) VALUES (
        GEN_RANDOM_UUID(),
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9,
        $10,
        $11,
        NOW()
    ) RETURNING id, recipe_url, title, description, cuisine, cooking_method, category, image_url, yields, prep_time_minutes, cook_time_minutes, total_time_minutes, created
`

type CreateRecipeParams struct {
	RecipeUrl        string
	Title            string
	Description      string
	Cuisine          string
	CookingMethod    string
	Category         string
	ImageUrl         string
	Yields           string
	PrepTimeMinutes  int32
	CookTimeMinutes  int32
	TotalTimeMinutes int32
}

func (q *Queries) CreateRecipe(ctx context.Context, arg CreateRecipeParams) (Recipe, error) {
	row := q.db.QueryRowContext(ctx, createRecipe,
		arg.RecipeUrl,
		arg.Title,
		arg.Description,
		arg.Cuisine,
		arg.CookingMethod,
		arg.Category,
		arg.ImageUrl,
		arg.Yields,
		arg.PrepTimeMinutes,
		arg.CookTimeMinutes,
		arg.TotalTimeMinutes,
	)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.RecipeUrl,
		&i.Title,
		&i.Description,
		&i.Cuisine,
		&i.CookingMethod,
		&i.Category,
		&i.ImageUrl,
		&i.Yields,
		&i.PrepTimeMinutes,
		&i.CookTimeMinutes,
		&i.TotalTimeMinutes,
		&i.Created,
	)
	return i, err
}

const deleteRecipe = `-- name: DeleteRecipe :exec
DELETE FROM recipes WHERE id=$1
`

func (q *Queries) DeleteRecipe(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteRecipe, id)
	return err
}

const getRecipeByID = `-- name: GetRecipeByID :one
SELECT id, recipe_url, title, description, cuisine, cooking_method, category, image_url, yields, prep_time_minutes, cook_time_minutes, total_time_minutes, created FROM recipes WHERE id=$1
`

func (q *Queries) GetRecipeByID(ctx context.Context, id uuid.UUID) (Recipe, error) {
	row := q.db.QueryRowContext(ctx, getRecipeByID, id)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.RecipeUrl,
		&i.Title,
		&i.Description,
		&i.Cuisine,
		&i.CookingMethod,
		&i.Category,
		&i.ImageUrl,
		&i.Yields,
		&i.PrepTimeMinutes,
		&i.CookTimeMinutes,
		&i.TotalTimeMinutes,
		&i.Created,
	)
	return i, err
}

const getRecipeByURL = `-- name: GetRecipeByURL :one
SELECT id, recipe_url, title, description, cuisine, cooking_method, category, image_url, yields, prep_time_minutes, cook_time_minutes, total_time_minutes, created FROM recipes WHERE recipe_url=$1
`

func (q *Queries) GetRecipeByURL(ctx context.Context, recipeUrl string) (Recipe, error) {
	row := q.db.QueryRowContext(ctx, getRecipeByURL, recipeUrl)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.RecipeUrl,
		&i.Title,
		&i.Description,
		&i.Cuisine,
		&i.CookingMethod,
		&i.Category,
		&i.ImageUrl,
		&i.Yields,
		&i.PrepTimeMinutes,
		&i.CookTimeMinutes,
		&i.TotalTimeMinutes,
		&i.Created,
	)
	return i, err
}
