// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.1
// source: recipes.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RecipesService_GetRecipeWithURL_FullMethodName = "/recipes.RecipesService/GetRecipeWithURL"
	RecipesService_CreateRecipe_FullMethodName     = "/recipes.RecipesService/CreateRecipe"
	RecipesService_GetRecipeWithID_FullMethodName  = "/recipes.RecipesService/GetRecipeWithID"
	RecipesService_SearchRecipes_FullMethodName    = "/recipes.RecipesService/SearchRecipes"
)

// RecipesServiceClient is the client API for RecipesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecipesServiceClient interface {
	GetRecipeWithURL(ctx context.Context, in *GetRecipeWithURLRequest, opts ...grpc.CallOption) (*RecipeIDResponse, error)
	CreateRecipe(ctx context.Context, in *CreateRecipeRequest, opts ...grpc.CallOption) (*RecipeIDResponse, error)
	GetRecipeWithID(ctx context.Context, in *GetRecipeWithIDRequest, opts ...grpc.CallOption) (*RecipeResponse, error)
	SearchRecipes(ctx context.Context, in *SearchRecipesRequest, opts ...grpc.CallOption) (*RecipesResponse, error)
}

type recipesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRecipesServiceClient(cc grpc.ClientConnInterface) RecipesServiceClient {
	return &recipesServiceClient{cc}
}

func (c *recipesServiceClient) GetRecipeWithURL(ctx context.Context, in *GetRecipeWithURLRequest, opts ...grpc.CallOption) (*RecipeIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecipeIDResponse)
	err := c.cc.Invoke(ctx, RecipesService_GetRecipeWithURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recipesServiceClient) CreateRecipe(ctx context.Context, in *CreateRecipeRequest, opts ...grpc.CallOption) (*RecipeIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecipeIDResponse)
	err := c.cc.Invoke(ctx, RecipesService_CreateRecipe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recipesServiceClient) GetRecipeWithID(ctx context.Context, in *GetRecipeWithIDRequest, opts ...grpc.CallOption) (*RecipeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecipeResponse)
	err := c.cc.Invoke(ctx, RecipesService_GetRecipeWithID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recipesServiceClient) SearchRecipes(ctx context.Context, in *SearchRecipesRequest, opts ...grpc.CallOption) (*RecipesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecipesResponse)
	err := c.cc.Invoke(ctx, RecipesService_SearchRecipes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecipesServiceServer is the server API for RecipesService service.
// All implementations must embed UnimplementedRecipesServiceServer
// for forward compatibility.
type RecipesServiceServer interface {
	GetRecipeWithURL(context.Context, *GetRecipeWithURLRequest) (*RecipeIDResponse, error)
	CreateRecipe(context.Context, *CreateRecipeRequest) (*RecipeIDResponse, error)
	GetRecipeWithID(context.Context, *GetRecipeWithIDRequest) (*RecipeResponse, error)
	SearchRecipes(context.Context, *SearchRecipesRequest) (*RecipesResponse, error)
	mustEmbedUnimplementedRecipesServiceServer()
}

// UnimplementedRecipesServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRecipesServiceServer struct{}

func (UnimplementedRecipesServiceServer) GetRecipeWithURL(context.Context, *GetRecipeWithURLRequest) (*RecipeIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecipeWithURL not implemented")
}
func (UnimplementedRecipesServiceServer) CreateRecipe(context.Context, *CreateRecipeRequest) (*RecipeIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecipe not implemented")
}
func (UnimplementedRecipesServiceServer) GetRecipeWithID(context.Context, *GetRecipeWithIDRequest) (*RecipeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecipeWithID not implemented")
}
func (UnimplementedRecipesServiceServer) SearchRecipes(context.Context, *SearchRecipesRequest) (*RecipesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchRecipes not implemented")
}
func (UnimplementedRecipesServiceServer) mustEmbedUnimplementedRecipesServiceServer() {}
func (UnimplementedRecipesServiceServer) testEmbeddedByValue()                        {}

// UnsafeRecipesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecipesServiceServer will
// result in compilation errors.
type UnsafeRecipesServiceServer interface {
	mustEmbedUnimplementedRecipesServiceServer()
}

func RegisterRecipesServiceServer(s grpc.ServiceRegistrar, srv RecipesServiceServer) {
	// If the following call pancis, it indicates UnimplementedRecipesServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RecipesService_ServiceDesc, srv)
}

func _RecipesService_GetRecipeWithURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecipeWithURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecipesServiceServer).GetRecipeWithURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecipesService_GetRecipeWithURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecipesServiceServer).GetRecipeWithURL(ctx, req.(*GetRecipeWithURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecipesService_CreateRecipe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRecipeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecipesServiceServer).CreateRecipe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecipesService_CreateRecipe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecipesServiceServer).CreateRecipe(ctx, req.(*CreateRecipeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecipesService_GetRecipeWithID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecipeWithIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecipesServiceServer).GetRecipeWithID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecipesService_GetRecipeWithID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecipesServiceServer).GetRecipeWithID(ctx, req.(*GetRecipeWithIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecipesService_SearchRecipes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRecipesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecipesServiceServer).SearchRecipes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecipesService_SearchRecipes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecipesServiceServer).SearchRecipes(ctx, req.(*SearchRecipesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RecipesService_ServiceDesc is the grpc.ServiceDesc for RecipesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecipesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "recipes.RecipesService",
	HandlerType: (*RecipesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRecipeWithURL",
			Handler:    _RecipesService_GetRecipeWithURL_Handler,
		},
		{
			MethodName: "CreateRecipe",
			Handler:    _RecipesService_CreateRecipe_Handler,
		},
		{
			MethodName: "GetRecipeWithID",
			Handler:    _RecipesService_GetRecipeWithID_Handler,
		},
		{
			MethodName: "SearchRecipes",
			Handler:    _RecipesService_SearchRecipes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "recipes.proto",
}
