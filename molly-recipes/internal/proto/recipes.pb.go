// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v6.30.1
// source: recipes.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Timer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	InstructionId string                 `protobuf:"bytes,2,opt,name=instruction_id,json=instructionId,proto3" json:"instruction_id,omitempty"`
	Value         int32                  `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	Unit          string                 `protobuf:"bytes,4,opt,name=unit,proto3" json:"unit,omitempty"`
	Created       string                 `protobuf:"bytes,5,opt,name=created,proto3" json:"created,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Timer) Reset() {
	*x = Timer{}
	mi := &file_recipes_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Timer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timer) ProtoMessage() {}

func (x *Timer) ProtoReflect() protoreflect.Message {
	mi := &file_recipes_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timer.ProtoReflect.Descriptor instead.
func (*Timer) Descriptor() ([]byte, []int) {
	return file_recipes_proto_rawDescGZIP(), []int{0}
}

func (x *Timer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Timer) GetInstructionId() string {
	if x != nil {
		return x.InstructionId
	}
	return ""
}

func (x *Timer) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Timer) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *Timer) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

type Instruction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RecipeId      string                 `protobuf:"bytes,2,opt,name=recipe_id,json=recipeId,proto3" json:"recipe_id,omitempty"`
	Index         int32                  `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	FullText      string                 `protobuf:"bytes,4,opt,name=full_text,json=fullText,proto3" json:"full_text,omitempty"`
	HasTimer      bool                   `protobuf:"varint,5,opt,name=has_timer,json=hasTimer,proto3" json:"has_timer,omitempty"`
	Timers        []*Timer               `protobuf:"bytes,6,rep,name=timers,proto3" json:"timers,omitempty"`
	Created       string                 `protobuf:"bytes,7,opt,name=created,proto3" json:"created,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Instruction) Reset() {
	*x = Instruction{}
	mi := &file_recipes_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Instruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Instruction) ProtoMessage() {}

func (x *Instruction) ProtoReflect() protoreflect.Message {
	mi := &file_recipes_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Instruction.ProtoReflect.Descriptor instead.
func (*Instruction) Descriptor() ([]byte, []int) {
	return file_recipes_proto_rawDescGZIP(), []int{1}
}

func (x *Instruction) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Instruction) GetRecipeId() string {
	if x != nil {
		return x.RecipeId
	}
	return ""
}

func (x *Instruction) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Instruction) GetFullText() string {
	if x != nil {
		return x.FullText
	}
	return ""
}

func (x *Instruction) GetHasTimer() bool {
	if x != nil {
		return x.HasTimer
	}
	return false
}

func (x *Instruction) GetTimers() []*Timer {
	if x != nil {
		return x.Timers
	}
	return nil
}

func (x *Instruction) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

type Ingredient struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RecipeId        string                 `protobuf:"bytes,2,opt,name=recipe_id,json=recipeId,proto3" json:"recipe_id,omitempty"`
	FullText        string                 `protobuf:"bytes,3,opt,name=full_text,json=fullText,proto3" json:"full_text,omitempty"`
	IsOptional      bool                   `protobuf:"varint,4,opt,name=is_optional,json=isOptional,proto3" json:"is_optional,omitempty"`
	Name            string                 `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Quantity        float32                `protobuf:"fixed32,6,opt,name=quantity,proto3" json:"quantity,omitempty"`
	QuantityString  string                 `protobuf:"bytes,7,opt,name=quantity_string,json=quantityString,proto3" json:"quantity_string,omitempty"`
	Unit            string                 `protobuf:"bytes,8,opt,name=unit,proto3" json:"unit,omitempty"`
	Size            string                 `protobuf:"bytes,9,opt,name=size,proto3" json:"size,omitempty"`
	IngredientGroup string                 `protobuf:"bytes,10,opt,name=ingredient_group,json=ingredientGroup,proto3" json:"ingredient_group,omitempty"`
	Created         string                 `protobuf:"bytes,11,opt,name=created,proto3" json:"created,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Ingredient) Reset() {
	*x = Ingredient{}
	mi := &file_recipes_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ingredient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ingredient) ProtoMessage() {}

func (x *Ingredient) ProtoReflect() protoreflect.Message {
	mi := &file_recipes_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ingredient.ProtoReflect.Descriptor instead.
func (*Ingredient) Descriptor() ([]byte, []int) {
	return file_recipes_proto_rawDescGZIP(), []int{2}
}

func (x *Ingredient) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Ingredient) GetRecipeId() string {
	if x != nil {
		return x.RecipeId
	}
	return ""
}

func (x *Ingredient) GetFullText() string {
	if x != nil {
		return x.FullText
	}
	return ""
}

func (x *Ingredient) GetIsOptional() bool {
	if x != nil {
		return x.IsOptional
	}
	return false
}

func (x *Ingredient) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Ingredient) GetQuantity() float32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *Ingredient) GetQuantityString() string {
	if x != nil {
		return x.QuantityString
	}
	return ""
}

func (x *Ingredient) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *Ingredient) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *Ingredient) GetIngredientGroup() string {
	if x != nil {
		return x.IngredientGroup
	}
	return ""
}

func (x *Ingredient) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

type Recipe struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Id               string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RecipeUrl        string                 `protobuf:"bytes,2,opt,name=recipe_url,json=recipeUrl,proto3" json:"recipe_url,omitempty"`
	Title            string                 `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Description      string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Cuisine          string                 `protobuf:"bytes,5,opt,name=cuisine,proto3" json:"cuisine,omitempty"`
	CookingMethod    string                 `protobuf:"bytes,6,opt,name=cooking_method,json=cookingMethod,proto3" json:"cooking_method,omitempty"`
	Category         string                 `protobuf:"bytes,7,opt,name=category,proto3" json:"category,omitempty"`
	ImageUrl         string                 `protobuf:"bytes,8,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	Yields           string                 `protobuf:"bytes,9,opt,name=yields,proto3" json:"yields,omitempty"`
	PrepTimeMinutes  int32                  `protobuf:"varint,10,opt,name=prep_time_minutes,json=prepTimeMinutes,proto3" json:"prep_time_minutes,omitempty"`
	CookTimeMinutes  int32                  `protobuf:"varint,11,opt,name=cook_time_minutes,json=cookTimeMinutes,proto3" json:"cook_time_minutes,omitempty"`
	TotalTimeMinutes int32                  `protobuf:"varint,12,opt,name=total_time_minutes,json=totalTimeMinutes,proto3" json:"total_time_minutes,omitempty"`
	Ingredients      []*Ingredient          `protobuf:"bytes,13,rep,name=ingredients,proto3" json:"ingredients,omitempty"`
	Instructions     []*Instruction         `protobuf:"bytes,14,rep,name=instructions,proto3" json:"instructions,omitempty"`
	Created          string                 `protobuf:"bytes,15,opt,name=created,proto3" json:"created,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Recipe) Reset() {
	*x = Recipe{}
	mi := &file_recipes_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Recipe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Recipe) ProtoMessage() {}

func (x *Recipe) ProtoReflect() protoreflect.Message {
	mi := &file_recipes_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Recipe.ProtoReflect.Descriptor instead.
func (*Recipe) Descriptor() ([]byte, []int) {
	return file_recipes_proto_rawDescGZIP(), []int{3}
}

func (x *Recipe) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Recipe) GetRecipeUrl() string {
	if x != nil {
		return x.RecipeUrl
	}
	return ""
}

func (x *Recipe) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Recipe) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Recipe) GetCuisine() string {
	if x != nil {
		return x.Cuisine
	}
	return ""
}

func (x *Recipe) GetCookingMethod() string {
	if x != nil {
		return x.CookingMethod
	}
	return ""
}

func (x *Recipe) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *Recipe) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *Recipe) GetYields() string {
	if x != nil {
		return x.Yields
	}
	return ""
}

func (x *Recipe) GetPrepTimeMinutes() int32 {
	if x != nil {
		return x.PrepTimeMinutes
	}
	return 0
}

func (x *Recipe) GetCookTimeMinutes() int32 {
	if x != nil {
		return x.CookTimeMinutes
	}
	return 0
}

func (x *Recipe) GetTotalTimeMinutes() int32 {
	if x != nil {
		return x.TotalTimeMinutes
	}
	return 0
}

func (x *Recipe) GetIngredients() []*Ingredient {
	if x != nil {
		return x.Ingredients
	}
	return nil
}

func (x *Recipe) GetInstructions() []*Instruction {
	if x != nil {
		return x.Instructions
	}
	return nil
}

func (x *Recipe) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

type GetRecipeWithURLRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RecipeUrl     string                 `protobuf:"bytes,1,opt,name=recipe_url,json=recipeUrl,proto3" json:"recipe_url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecipeWithURLRequest) Reset() {
	*x = GetRecipeWithURLRequest{}
	mi := &file_recipes_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecipeWithURLRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipeWithURLRequest) ProtoMessage() {}

func (x *GetRecipeWithURLRequest) ProtoReflect() protoreflect.Message {
	mi := &file_recipes_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipeWithURLRequest.ProtoReflect.Descriptor instead.
func (*GetRecipeWithURLRequest) Descriptor() ([]byte, []int) {
	return file_recipes_proto_rawDescGZIP(), []int{4}
}

func (x *GetRecipeWithURLRequest) GetRecipeUrl() string {
	if x != nil {
		return x.RecipeUrl
	}
	return ""
}

type CreateRecipeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Recipe        *Recipe                `protobuf:"bytes,1,opt,name=recipe,proto3" json:"recipe,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRecipeRequest) Reset() {
	*x = CreateRecipeRequest{}
	mi := &file_recipes_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRecipeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRecipeRequest) ProtoMessage() {}

func (x *CreateRecipeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_recipes_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRecipeRequest.ProtoReflect.Descriptor instead.
func (*CreateRecipeRequest) Descriptor() ([]byte, []int) {
	return file_recipes_proto_rawDescGZIP(), []int{5}
}

func (x *CreateRecipeRequest) GetRecipe() *Recipe {
	if x != nil {
		return x.Recipe
	}
	return nil
}

type GetRecipeWithIDRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecipeWithIDRequest) Reset() {
	*x = GetRecipeWithIDRequest{}
	mi := &file_recipes_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecipeWithIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipeWithIDRequest) ProtoMessage() {}

func (x *GetRecipeWithIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_recipes_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipeWithIDRequest.ProtoReflect.Descriptor instead.
func (*GetRecipeWithIDRequest) Descriptor() ([]byte, []int) {
	return file_recipes_proto_rawDescGZIP(), []int{6}
}

func (x *GetRecipeWithIDRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RecipeIDResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecipeIDResponse) Reset() {
	*x = RecipeIDResponse{}
	mi := &file_recipes_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeIDResponse) ProtoMessage() {}

func (x *RecipeIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_recipes_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeIDResponse.ProtoReflect.Descriptor instead.
func (*RecipeIDResponse) Descriptor() ([]byte, []int) {
	return file_recipes_proto_rawDescGZIP(), []int{7}
}

func (x *RecipeIDResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RecipeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Recipe        *Recipe                `protobuf:"bytes,1,opt,name=recipe,proto3" json:"recipe,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecipeResponse) Reset() {
	*x = RecipeResponse{}
	mi := &file_recipes_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeResponse) ProtoMessage() {}

func (x *RecipeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_recipes_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeResponse.ProtoReflect.Descriptor instead.
func (*RecipeResponse) Descriptor() ([]byte, []int) {
	return file_recipes_proto_rawDescGZIP(), []int{8}
}

func (x *RecipeResponse) GetRecipe() *Recipe {
	if x != nil {
		return x.Recipe
	}
	return nil
}

type SearchRecipesRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Query          string                 `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Page           int32                  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	ResultsPerPage int32                  `protobuf:"varint,3,opt,name=results_per_page,json=resultsPerPage,proto3" json:"results_per_page,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SearchRecipesRequest) Reset() {
	*x = SearchRecipesRequest{}
	mi := &file_recipes_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchRecipesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRecipesRequest) ProtoMessage() {}

func (x *SearchRecipesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_recipes_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRecipesRequest.ProtoReflect.Descriptor instead.
func (*SearchRecipesRequest) Descriptor() ([]byte, []int) {
	return file_recipes_proto_rawDescGZIP(), []int{9}
}

func (x *SearchRecipesRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *SearchRecipesRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SearchRecipesRequest) GetResultsPerPage() int32 {
	if x != nil {
		return x.ResultsPerPage
	}
	return 0
}

type RecipesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int32                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Recipes       []*Recipe              `protobuf:"bytes,2,rep,name=recipes,proto3" json:"recipes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecipesResponse) Reset() {
	*x = RecipesResponse{}
	mi := &file_recipes_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipesResponse) ProtoMessage() {}

func (x *RecipesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_recipes_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipesResponse.ProtoReflect.Descriptor instead.
func (*RecipesResponse) Descriptor() ([]byte, []int) {
	return file_recipes_proto_rawDescGZIP(), []int{10}
}

func (x *RecipesResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *RecipesResponse) GetRecipes() []*Recipe {
	if x != nil {
		return x.Recipes
	}
	return nil
}

var File_recipes_proto protoreflect.FileDescriptor

var file_recipes_proto_rawDesc = string([]byte{
	0x0a, 0x0d, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x05, 0x54, 0x69, 0x6d,
	0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x6e, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0xcc, 0x01,
	0x0a, 0x0b, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x68, 0x61, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x68, 0x61, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x06, 0x74, 0x69,
	0x6d, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x65,
	0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0xbd, 0x02, 0x0a,
	0x0a, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c,
	0x6c, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x6e, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0x92, 0x04, 0x0a,
	0x06, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x75, 0x69, 0x73, 0x69, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x75, 0x69, 0x73, 0x69, 0x6e, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x79, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x69,
	0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x72, 0x65,
	0x70, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11,
	0x63, 0x6f, 0x6f, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x6f, 0x6f, 0x6b, 0x54, 0x69, 0x6d,
	0x65, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74,
	0x52, 0x0b, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x38, 0x0a,
	0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x22, 0x38, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x57, 0x69,
	0x74, 0x68, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x3e, 0x0a, 0x13, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x52, 0x06, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x22, 0x28, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x57, 0x69, 0x74, 0x68, 0x49, 0x44, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x22, 0x0a, 0x10, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49,
	0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x39, 0x0a, 0x0e, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x06, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x22, 0x6a, 0x0a, 0x14, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x50, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65,
	0x22, 0x52, 0x0a, 0x0f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x29, 0x0a, 0x07, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x07, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x73, 0x32, 0xc1, 0x02, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x73,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x57, 0x69, 0x74, 0x68, 0x55, 0x52, 0x4c, 0x12, 0x20, 0x2e, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x57,
	0x69, 0x74, 0x68, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x12, 0x1c, 0x2e, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x73,
	0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4b, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x57, 0x69,
	0x74, 0x68, 0x49, 0x44, 0x12, 0x1f, 0x2e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x73, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x57, 0x69, 0x74, 0x68, 0x49, 0x44, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x73, 0x2e,
	0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48,
	0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x73, 0x12,
	0x1d, 0x2e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18,
	0x2e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x10, 0x5a, 0x0e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
})

var (
	file_recipes_proto_rawDescOnce sync.Once
	file_recipes_proto_rawDescData []byte
)

func file_recipes_proto_rawDescGZIP() []byte {
	file_recipes_proto_rawDescOnce.Do(func() {
		file_recipes_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_recipes_proto_rawDesc), len(file_recipes_proto_rawDesc)))
	})
	return file_recipes_proto_rawDescData
}

var file_recipes_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_recipes_proto_goTypes = []any{
	(*Timer)(nil),                   // 0: recipes.Timer
	(*Instruction)(nil),             // 1: recipes.Instruction
	(*Ingredient)(nil),              // 2: recipes.Ingredient
	(*Recipe)(nil),                  // 3: recipes.Recipe
	(*GetRecipeWithURLRequest)(nil), // 4: recipes.GetRecipeWithURLRequest
	(*CreateRecipeRequest)(nil),     // 5: recipes.CreateRecipeRequest
	(*GetRecipeWithIDRequest)(nil),  // 6: recipes.GetRecipeWithIDRequest
	(*RecipeIDResponse)(nil),        // 7: recipes.RecipeIDResponse
	(*RecipeResponse)(nil),          // 8: recipes.RecipeResponse
	(*SearchRecipesRequest)(nil),    // 9: recipes.SearchRecipesRequest
	(*RecipesResponse)(nil),         // 10: recipes.RecipesResponse
}
var file_recipes_proto_depIdxs = []int32{
	0,  // 0: recipes.Instruction.timers:type_name -> recipes.Timer
	2,  // 1: recipes.Recipe.ingredients:type_name -> recipes.Ingredient
	1,  // 2: recipes.Recipe.instructions:type_name -> recipes.Instruction
	3,  // 3: recipes.CreateRecipeRequest.recipe:type_name -> recipes.Recipe
	3,  // 4: recipes.RecipeResponse.recipe:type_name -> recipes.Recipe
	3,  // 5: recipes.RecipesResponse.recipes:type_name -> recipes.Recipe
	4,  // 6: recipes.RecipesService.GetRecipeWithURL:input_type -> recipes.GetRecipeWithURLRequest
	5,  // 7: recipes.RecipesService.CreateRecipe:input_type -> recipes.CreateRecipeRequest
	6,  // 8: recipes.RecipesService.GetRecipeWithID:input_type -> recipes.GetRecipeWithIDRequest
	9,  // 9: recipes.RecipesService.SearchRecipes:input_type -> recipes.SearchRecipesRequest
	7,  // 10: recipes.RecipesService.GetRecipeWithURL:output_type -> recipes.RecipeIDResponse
	7,  // 11: recipes.RecipesService.CreateRecipe:output_type -> recipes.RecipeIDResponse
	8,  // 12: recipes.RecipesService.GetRecipeWithID:output_type -> recipes.RecipeResponse
	10, // 13: recipes.RecipesService.SearchRecipes:output_type -> recipes.RecipesResponse
	10, // [10:14] is the sub-list for method output_type
	6,  // [6:10] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_recipes_proto_init() }
func file_recipes_proto_init() {
	if File_recipes_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_recipes_proto_rawDesc), len(file_recipes_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_recipes_proto_goTypes,
		DependencyIndexes: file_recipes_proto_depIdxs,
		MessageInfos:      file_recipes_proto_msgTypes,
	}.Build()
	File_recipes_proto = out.File
	file_recipes_proto_goTypes = nil
	file_recipes_proto_depIdxs = nil
}
